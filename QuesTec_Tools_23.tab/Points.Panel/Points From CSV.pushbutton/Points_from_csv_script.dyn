{
  "Uuid": "3ceb7766-e843-4717-8d4b-e63edb2d6127",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Points from csv",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import csv\r\nimport os\r\nfrom pyrevit import forms\r\nfrom Autodesk.Revit.DB import FilteredElementCollector, FamilyInstance, XYZ, Transaction, BuiltInCategory\r\n\r\n# Prompt user to select a CSV file\r\nfile_path = forms.pick_file(file_ext='csv', files_filter=\"CSV files (*.csv)|*.csv\", multi_file=False)\r\nif not file_path or not os.path.exists(file_path):\r\n    forms.alert('No file selected or file does not exist.', exitscript=True)\r\n\r\n# Read data from CSV file (mark, x, y, z, comments)\r\ndata = []\r\nwith open(file_path, 'r') as csvfile:\r\n    csvreader = csv.reader(csvfile)\r\n    for row in csvreader:\r\n        try:\r\n            # Expecting the format: mark, X, Y, Z, comments\r\n            mark = row[0]\r\n            x = float(row[1])\r\n            y = float(row[2])\r\n            z = float(row[3])\r\n            comments = row[4]\r\n            # Store the data as a tuple with mark, XYZ object, and comments\r\n            data.append((mark, x, y, z, comments))\r\n        except (ValueError, IndexError):\r\n            forms.alert('Invalid CSV format. Ensure it contains mark, X, Y, Z, and comments.', exitscript=True)\r\n\r\n# Get current Revit document\r\ndoc = __revit__.ActiveUIDocument.Document\r\n\r\n# Collect all loaded family symbols from the project\r\nfamily_collector = FilteredElementCollector(doc).OfClass(FamilyInstance)\r\n\r\n# Create a dictionary of family symbols for user selection\r\nfamily_symbols = {}\r\nfor family_instance in family_collector:\r\n    family_symbols[family_instance.Symbol.Family.Name + \" - \" + family_instance.Symbol.Name] = family_instance.Symbol\r\n\r\nif not family_symbols:\r\n    forms.alert(\"No family symbols found in the project.\", exitscript=True)\r\n\r\n# Prompt user to select a family symbol\r\nselected_family_name = forms.SelectFromList.show(list(family_symbols.keys()), title='Select Family Symbol', button_name='Select')\r\nif not selected_family_name:\r\n    forms.alert('No family symbol selected.', exitscript=True)\r\n\r\nselected_family_symbol = family_symbols[selected_family_name]\r\n\r\n# Ensure that the family symbol is activated\r\nif not selected_family_symbol.IsActive:\r\n    t_activate = Transaction(doc, 'Activate Family Symbol')\r\n    t_activate.Start()\r\n    selected_family_symbol.Activate()\r\n    t_activate.Commit()\r\n\r\n# Start transaction to place instances of family symbol at each coordinate and set mark and comments\r\nt = Transaction(doc, 'Place Family Instances from CSV')\r\nt.Start()\r\n\r\ntry:\r\n    for mark, x, y, z, comments in data:\r\n        # Create the XYZ object from x, y, z coordinates\r\n        coord = XYZ(x, y, z)\r\n        \r\n        # Place the family instance at the given coordinate (XYZ object)\r\n        family_instance = doc.Create.NewFamilyInstance(coord, selected_family_symbol, doc.ActiveView)\r\n        \r\n        # Set the \"Mark\" and \"Comments\" parameters\r\n        mark_param = family_instance.LookupParameter('Mark')\r\n        comments_param = family_instance.LookupParameter('Comments')\r\n        \r\n        if mark_param and mark:\r\n            mark_param.Set(mark)\r\n        \r\n        if comments_param and comments:\r\n            comments_param.Set(comments)\r\n    \r\n    t.Commit()\r\n    forms.alert('Family instances placed successfully with Mark and Comments!')\r\n\r\nexcept Exception as e:\r\n    t.RollBack()\r\n    forms.alert('Error placing family instances: {}'.format(str(e)), exitscript=True)\r\n",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "501dee5e5ab844478e52c71dfa04ca16",
      "Inputs": [
        {
          "Id": "b6b5ef3f41614d4bb01cee3ee12d5318",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f42869dd6c534a66b459154e0d84f000",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Connectors": [],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.16",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "3.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.16.2.5624",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "501dee5e5ab844478e52c71dfa04ca16",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1243.2984374340331,
        "Y": 169.68113054481603
      }
    ],
    "Annotations": [],
    "X": -1537.2424583317575,
    "Y": 31.785364024085993,
    "Zoom": 1.4596225598868589
  }
}